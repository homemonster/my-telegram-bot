require('dotenv').config(); // –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
const TelegramBot = require('node-telegram-bot-api');
const mysql = require('mysql2/promise');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
    token: process.env.BOT_TOKEN, 
    db: {
        host: process.env.DB_HOST,                  
        user: process.env.DB_USER,                 
        password: process.env.DB_PASSWORD,          
        database: process.env.DB_NAME,              
        port: parseInt(process.env.DB_PORT) || 3306,
        waitForConnections: true,
        connectionLimit: 10,
        queueLimit: 0
    }
};


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(config.token, {polling: true});
const pool = mysql.createPool(config.db);
const userState = {};

// ==================== –ú–æ–¥—É–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ====================

// 1. –ú–æ–¥—É–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const registrationModule = {
    start: async (chatId, user) => {
        if (user) {
            const options = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: "–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data: "forget_me" }]
                    ]
                }
            };
            const sentMessage = await bot.sendMessage(
                chatId, 
                `–ü—Ä–∏–≤–µ—Ç, ${user.first_name}! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?`, 
                options
            );
            userState[chatId] = { buttonMessageId: sentMessage.message_id };
        } else {
            await bot.sendMessage(chatId, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è. –ö–∞–∫ –í–∞—à–µ –∏–º—è?");
            userState[chatId] = { step: 'first_name' };
        }
    },

    handleMessage: async (msg) => {
        const chatId = msg.chat.id;
        const text = msg.text.trim();
    
        if (!userState[chatId]?.step) return false;
    
        try {
            switch (userState[chatId].step) {
                case 'first_name':
                    await registrationModule.handleFirstName(chatId, text);
                    return true;
                
                case 'last_name':
                    await registrationModule.handleLastName(chatId, text);
                    return true;
                
                case 'age':
                    await registrationModule.handleAge(chatId, text);
                    return true;
                
                case 'department':
                    await registrationModule.handleDepartment(chatId, text);
                    return true;
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', err);
            await bot.sendMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            delete userState[chatId];
        }
        return false;
    },

    handleFirstName: async (chatId, name) => {
        userState[chatId] = { ...userState[chatId], first_name: name, step: 'last_name' };
        await bot.sendMessage(chatId, "–ö–∞–∫–∞—è —É –í–∞—Å —Ñ–∞–º–∏–ª–∏—è?");
    },

    handleLastName: async (chatId, lastName) => {
        userState[chatId] = { ...userState[chatId], last_name: lastName, step: 'age' };
        await bot.sendMessage(chatId, "–°–∫–æ–ª—å–∫–æ –í–∞–º –ª–µ—Ç?");
    },

    handleAge: async (chatId, age) => {
        if (isNaN(age)) {
            await bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
            return;
        }
        userState[chatId] = { ...userState[chatId], age: Number(age), step: 'department' };
        await bot.sendMessage(chatId, "–í –∫–∞–∫–æ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ –í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?");
    },

    handleDepartment: async (chatId, department) => {
        try {
            const conn = await pool.getConnection();
            await conn.query(
                "INSERT INTO users (chat_id, first_name, last_name, age, department) VALUES (?, ?, ?, ?, ?)",
                [chatId, userState[chatId].first_name, userState[chatId].last_name, userState[chatId].age, department]
            );
            conn.release();
            
            await bot.sendMessage(
                chatId, 
                `‚úÖ –°–ø–∞—Å–∏–±–æ, ${userState[chatId].first_name}! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.`
            );
        } catch (err) {
            console.error(err);
            await bot.sendMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.");
        } finally {
            delete userState[chatId];
        }
    }
};

// 2. –ú–æ–¥—É–ª—å —Ä–∞–±–æ—Ç—ã —Å —à–∞–≥–∞–º–∏
const stepsModule = {
    startAdd: async (chatId) => {
        const buttons = [
            [{ text: "2025-07-19", callback_data: "steps_date_2025-07-19" }],
            [{ text: "2025-07-20", callback_data: "steps_date_2025-07-20" }],
            [{ text: "2025-07-21", callback_data: "steps_date_2025-07-21" }],
            [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "steps_cancel" }]
        ];

        await bot.sendMessage(chatId, "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:", {
            reply_markup: { inline_keyboard: buttons }
        });
    },

    startReport: async (chatId) => {
        try {
            const conn = await pool.getConnection();
            const [rows] = await conn.query(`
                SELECT DISTINCT DATE_FORMAT(date, '%Y-%m-%d') as formatted_date 
                FROM steps WHERE chat_id = ? ORDER BY date DESC
            `, [chatId]);
            conn.release();

            if (rows.length === 0) {
                await bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞.");
                return;
            }

            const buttons = rows.map(row => [{
                text: row.formatted_date,
                callback_data: `report_${row.formatted_date}`
            }]);
            buttons.push([{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "report_cancel" }]);

            await bot.sendMessage(chatId, "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –æ—Ç—á–µ—Ç–∞:", {
                reply_markup: { inline_keyboard: buttons }
            });
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç—á–µ—Ç–∞:', err);
            await bot.sendMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.");
        }
    },

    handleMessage: async (msg) => {
        const chatId = msg.chat.id;
        const text = msg.text.trim();
    
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —à–∞–≥–∞ –∏ —á—Ç–æ –æ–Ω –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –º–æ–¥—É–ª—é —à–∞–≥–æ–≤
        if (!userState[chatId] || !['steps_count', 'meters_count'].includes(userState[chatId].step)) {
            return false;
        }
    
        try {
            switch (userState[chatId].step) {
                case 'steps_count':
                    await stepsModule.handleSteps(chatId, text);
                    return true;
                
                case 'meters_count':
                    await stepsModule.handleMeters(chatId, text);
                    return true;
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ —à–∞–≥–æ–≤:', err);
            await bot.sendMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.");
            delete userState[chatId];
        }
        return false;
    },

    handleDate: async (chatId, date) => {
        if (!date.match(/^\d{4}-\d{2}-\d{2}$/)) {
            await bot.sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î");
            return;
        }
        userState[chatId] = { ...userState[chatId], date, step: 'steps_count' };
        await bot.sendMessage(chatId, "–°–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –≤—ã –ø—Ä–æ—à–ª–∏?");
    },

    handleSteps: async (chatId, steps) => {
        if (isNaN(steps)) {
            await bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
            return;
        }
        userState[chatId] = { ...userState[chatId], steps: Number(steps), step: 'meters_count' };
        await bot.sendMessage(chatId, "–°–∫–æ–ª—å–∫–æ –º–µ—Ç—Ä–æ–≤ –≤—ã –ø—Ä–æ—à–ª–∏?");
    },

    handleMeters: async (chatId, meters) => {
        if (isNaN(meters)) {
            await bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
            return;
        }

        try {
            const conn = await pool.getConnection();
            const { date, steps } = userState[chatId];
            const metersValue = Number(meters);

            await conn.query(
                "INSERT INTO steps (chat_id, date, steps, meters) VALUES (?, ?, ?, ?) " +
                "ON DUPLICATE KEY UPDATE steps = VALUES(steps), meters = VALUES(meters)",
                [chatId, date, steps, metersValue]
            );
            conn.release();

            await bot.sendMessage(chatId, `‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞ ${date} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!`);
        } catch (err) {
            console.error(err);
            await bot.sendMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.");
        } finally {
            delete userState[chatId];
        }
    }
};

// 3. –ú–æ–¥—É–ª—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
const greetingModule = {
    sendGreeting: async (chatId) => {
        try {
            const conn = await pool.getConnection();
            const [rows] = await conn.query(
                "SELECT first_name FROM users WHERE chat_id = ?", 
                [chatId]
            );
            conn.release();

            if (rows.length > 0) {
                await bot.sendMessage(chatId, `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${rows[0].first_name}!`);
            } else {
                await bot.sendMessage(chatId, "–Ø –í–∞—Å –Ω–µ –∑–Ω–∞—é. –ù–∞—á–Ω–∏—Ç–µ —Å /start");
            }
        } catch (err) {
            console.error(err);
            await bot.sendMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.");
        }
    }
};

// ==================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ====================

// 1. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    
    try {
        const conn = await pool.getConnection();
        const [rows] = await conn.query("SELECT * FROM users WHERE chat_id = ?", [chatId]);
        conn.release();

        await registrationModule.start(chatId, rows[0]);
    } catch (err) {
        console.error(err);
        await bot.sendMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.");
    }
});

// 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /add
bot.onText(/\/add/, async (msg) => {
    await stepsModule.startAdd(msg.chat.id);
});

// 3. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /report
bot.onText(/\/report/, async (msg) => {
    await stepsModule.startReport(msg.chat.id);
});

// 4. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /hello
bot.onText(/\/hello/, async (msg) => {
    await greetingModule.sendGreeting(msg.chat.id);
});

// ==================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ====================

// 1. –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    if (!msg.text || msg.text.startsWith('/')) return;

    const chatId = msg.chat.id;
    
    // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (userState[chatId]?.buttonMessageId) {
        try {
            await bot.editMessageReplyMarkup(
                { inline_keyboard: [] },
                { chat_id: chatId, message_id: userState[chatId].buttonMessageId }
            );
            delete userState[chatId].buttonMessageId;
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫:', err);
        }
    }

    // –ü—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–æ–¥—É–ª—è—Ö
    const processed = 
        await registrationModule.handleMessage(msg) ||
        await stepsModule.handleMessage(msg);
});

// 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    let conn; // –û–±—ä—è–≤–ª—è–µ–º conn –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ finally

    try {
        if (data.startsWith('steps_date_')) {
            const date = data.replace('steps_date_', '');
            await bot.deleteMessage(chatId, callbackQuery.message.message_id);
            userState[chatId] = { date, step: 'steps_count' };
            await bot.sendMessage(chatId, `–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: ${date}\n–°–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –≤—ã –ø—Ä–æ—à–ª–∏?`);
        }
        else if (data === 'steps_cancel') {
            await bot.deleteMessage(chatId, callbackQuery.message.message_id);
            delete userState[chatId];
        }
        else if (data === 'forget_me') {
            conn = await pool.getConnection();
            await conn.query("DELETE FROM users WHERE chat_id = ?", [chatId]);
            await conn.query("DELETE FROM steps WHERE chat_id = ?", [chatId]);
            
            await bot.editMessageReplyMarkup(
                { inline_keyboard: [] },
                { 
                    chat_id: chatId, 
                    message_id: callbackQuery.message.message_id 
                }
            );
            await bot.sendMessage(chatId, "‚úÖ –î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Å /start");
            delete userState[chatId];
        } 
        else if (data === 'report_cancel') {
            await bot.deleteMessage(chatId, callbackQuery.message.message_id);
        }
        else if (data.startsWith('report_')) {
            const date = data.replace('report_', '');
            conn = await pool.getConnection();
            const [rows] = await conn.query(
                "SELECT steps, meters FROM steps WHERE chat_id = ? AND DATE(date) = ?",
                [chatId, date]
            );

            await bot.deleteMessage(chatId, callbackQuery.message.message_id);

            if (rows.length > 0) {
                await bot.sendMessage(
                    chatId,
                    `üìä –û—Ç—á–µ—Ç –∑–∞ ${date}:\n–®–∞–≥–∏: ${rows[0].steps}\n–ú–µ—Ç—Ä—ã: ${rows[0].meters}`
                );
            } else {
                await bot.sendMessage(chatId, `–î–∞–Ω–Ω—ã–µ –∑–∞ ${date} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`);
            }
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ callback:', err);
        await bot.sendMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.");
    } finally {
        if (conn) await conn.release(); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ
    }
});

// 3. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
bot.on('new_chat_members', (msg) => {
    if (msg.new_chat_members.some(m => m.username === bot.options.username)) {
        bot.sendMessage(
            msg.chat.id,
            '–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å–æ –º–Ω–æ–π.'
        );
    }
});

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');